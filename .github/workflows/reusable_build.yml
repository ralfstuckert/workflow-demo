name: Java_CI_mit_Maven

on:
  workflow_call:
    inputs:
      version:
        description: "the version of the jar to build. On release, the version must be given. On ci it must NOT be given"
        type: string
        default: ""
        required: false
    outputs:
       image-version: 
         description: "the built jar version"
         value: ${{ jobs.build.outputs.jar-version }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      jar-version: ${{ inputs.version || steps.extract-version.outputs.version }}
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build CI with Gradle
      if: ${{ inputs.version == '' }}
      run: ./gradlew cleanTest build

    - name: Build release with Gradle
      if: ${{ inputs.version != '' }}
      run: gradle -Pversion=${{github.event.release.tag_name}} build

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1.19
      if: always()
      with:
        files: build/test-results/test/*.xml
          
    - name: Publish to GitHub Packages
      if: ${{ inputs.version != '' }}
      run: gradle -Pversion=${{github.event.release.tag_name}} publish
      env:
        USERNAME: ${{ github.actor }}
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: extract version
      if: ${{ inputs.version == '' }}
      id: extract-version
      run: "echo ::set-output name=version::$( ./gradlew properties | sed -n -e 's/^version: \\(.*\\)$/\\1/p' )"
      
    - name: show output
      run: echo "version is ${{ inputs.version || steps.extract-version.outputs.version }}"

